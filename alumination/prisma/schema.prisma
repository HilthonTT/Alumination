generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}
  
model Profile {
  id String @id @default(uuid())
  userId String @unique
  username String
  imageUrl String @db.Text
  email String @db.Text

  songs Song[]
  albumSong AlbumSong[]
  album Album[]
  members Member[]
  bands Band[]

  followers Following[] @relation("Followee")
  followingArtists Following[] @relation("Follower")

  ReceivedNotification Notification[] @relation("Receiver")
  IssuedNotification Notification[] @relation("Issuer")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@fulltext([username])
}

model Song {
  id String @id @default(uuid())
  title String
  description String
  songPath String @db.Text
  imageUrl String

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  categoryId String
  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String

  songs Song[]
  albums Album[]
}


model Following {
  id String @id @default(uuid())

  followeeId String
  followee Profile @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)

  followerId String
  follower Profile @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)

  @@index([followeeId])
  @@index([followerId])

  @@unique([followeeId, followerId])
}

enum NotificationType {
  SONG
  ALBUM
}

model Notification {
  id String @id @default(uuid())
  body String
  type NotificationType @default(SONG)

  receiverId String
  receiver Profile @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  issuerId String
  issuer Profile @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)

  itemId String

  @@index([receiverId])
  @@index([issuerId])

  @@unique([receiverId, issuerId])
}

model AlbumSong {
  id String @id @default(uuid())

  title String
  description String
  songPath String
  imageUrl String @db.Text

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  albumId String
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([albumId])
}

model Album {
  id String @id @default(uuid())

  title String
  description String
  imageUrl String @db.Text

  songs AlbumSong[]

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  categoryId String
  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([categoryId])
}

model Band {
  id String @id @default(uuid())

  name String
  description String

  iconImageUrl String @db.Text
  bannerImageUrl String @db.Text

  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  songs BandSong[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@fulltext([name])
}

model BandSong {
  id String @id @default(uuid())

  title String
  description String
  songPath String
  imageUrl String @db.Text

  bandId String
  band Band @relation(fields: [bandId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bandId])
}

model Member {
  id String @id @default(uuid())

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  bandId String
  band Band @relation(fields: [bandId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([bandId])
}